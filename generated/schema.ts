// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IndexPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IndexPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IndexPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IndexPool", id.toString(), this);
  }

  static load(id: string): IndexPool | null {
    return store.get("IndexPool", id) as IndexPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokensList(): Array<Bytes> {
    let value = this.get("tokensList");
    return value.toBytesArray();
  }

  set tokensList(value: Array<Bytes>) {
    this.set("tokensList", Value.fromBytesArray(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee");
    return value.toBigDecimal();
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get totalSwapVolumeUSD(): BigDecimal {
    let value = this.get("totalSwapVolumeUSD");
    return value.toBigDecimal();
  }

  set totalSwapVolumeUSD(value: BigDecimal) {
    this.set("totalSwapVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get undboundTokenSellerAddress(): Bytes {
    let value = this.get("undboundTokenSellerAddress");
    return value.toBytes();
  }

  set undboundTokenSellerAddress(value: Bytes) {
    this.set("undboundTokenSellerAddress", Value.fromBytes(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get totalWeight(): BigInt {
    let value = this.get("totalWeight");
    return value.toBigInt();
  }

  set totalWeight(value: BigInt) {
    this.set("totalWeight", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get maxTotalSupply(): BigInt {
    let value = this.get("maxTotalSupply");
    return value.toBigInt();
  }

  set maxTotalSupply(value: BigInt) {
    this.set("maxTotalSupply", Value.fromBigInt(value));
  }

  get dailySnapshots(): Array<string> {
    let value = this.get("dailySnapshots");
    return value.toStringArray();
  }

  set dailySnapshots(value: Array<string>) {
    this.set("dailySnapshots", Value.fromStringArray(value));
  }

  get hourelySnapshot(): Array<string> {
    let value = this.get("hourelySnapshot");
    return value.toStringArray();
  }

  set hourelySnapshot(value: Array<string>) {
    this.set("hourelySnapshot", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get feesTotalUSD(): BigDecimal {
    let value = this.get("feesTotalUSD");
    return value.toBigDecimal();
  }

  set feesTotalUSD(value: BigDecimal) {
    this.set("feesTotalUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get list(): string {
    let value = this.get("list");
    return value.toString();
  }

  set list(value: string) {
    this.set("list", Value.fromString(value));
  }
}

export class ListManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ListManager entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ListManager entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ListManager", id.toString(), this);
  }

  static load(id: string): ListManager | null {
    return store.get("ListManager", id) as ListManager | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get categoryIndex(): i32 {
    let value = this.get("categoryIndex");
    return value.toI32();
  }

  set categoryIndex(value: i32) {
    this.set("categoryIndex", Value.fromI32(value));
  }

  get poolsList(): Array<string> {
    let value = this.get("poolsList");
    return value.toStringArray();
  }

  set poolsList(value: Array<string>) {
    this.set("poolsList", Value.fromStringArray(value));
  }
}

export class Lists extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Lists entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Lists entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Lists", id.toString(), this);
  }

  static load(id: string): Lists | null {
    return store.get("Lists", id) as Lists | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadataHash(): Bytes {
    let value = this.get("metadataHash");
    return value.toBytes();
  }

  set metadataHash(value: Bytes) {
    this.set("metadataHash", Value.fromBytes(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get scoringStrategy(): Bytes {
    let value = this.get("scoringStrategy");
    return value.toBytes();
  }

  set scoringStrategy(value: Bytes) {
    this.set("scoringStrategy", Value.fromBytes(value));
  }

  get minimumScore(): BigInt {
    let value = this.get("minimumScore");
    return value.toBigInt();
  }

  set minimumScore(value: BigInt) {
    this.set("minimumScore", Value.fromBigInt(value));
  }

  get maximumScore(): BigInt {
    let value = this.get("maximumScore");
    return value.toBigInt();
  }

  set maximumScore(value: BigInt) {
    this.set("maximumScore", Value.fromBigInt(value));
  }

  get indexPools(): Array<string> {
    let value = this.get("indexPools");
    return value.toStringArray();
  }

  set indexPools(value: Array<string>) {
    this.set("indexPools", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }
}

export class UnderlyingTokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnderlyingTokens entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnderlyingTokens entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnderlyingTokens", id.toString(), this);
  }

  static load(id: string): UnderlyingTokens | null {
    return store.get("UnderlyingTokens", id) as UnderlyingTokens | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ready(): boolean {
    let value = this.get("ready");
    return value.toBoolean();
  }

  set ready(value: boolean) {
    this.set("ready", Value.fromBoolean(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get minimumBalance(): BigInt | null {
    let value = this.get("minimumBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("minimumBalance");
    } else {
      this.set("minimumBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get denorm(): BigInt {
    let value = this.get("denorm");
    return value.toBigInt();
  }

  set denorm(value: BigInt) {
    this.set("denorm", Value.fromBigInt(value));
  }

  get desiredDenorm(): BigInt {
    let value = this.get("desiredDenorm");
    return value.toBigInt();
  }

  set desiredDenorm(value: BigInt) {
    this.set("desiredDenorm", Value.fromBigInt(value));
  }
}

export class HourelyPoolSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourelyPoolSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourelyPoolSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourelyPoolSnapshot", id.toString(), this);
  }

  static load(id: string): HourelyPoolSnapshot | null {
    return store.get("HourelyPoolSnapshot", id) as HourelyPoolSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get feesTotalUSD(): BigDecimal {
    let value = this.get("feesTotalUSD");
    return value.toBigDecimal();
  }

  set feesTotalUSD(value: BigDecimal) {
    this.set("feesTotalUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSwapVolumeUSD(): BigDecimal {
    let value = this.get("totalSwapVolumeUSD");
    return value.toBigDecimal();
  }

  set totalSwapVolumeUSD(value: BigDecimal) {
    this.set("totalSwapVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get balances(): Array<BigInt> {
    let value = this.get("balances");
    return value.toBigIntArray();
  }

  set balances(value: Array<BigInt>) {
    this.set("balances", Value.fromBigIntArray(value));
  }

  get denorms(): Array<BigInt> {
    let value = this.get("denorms");
    return value.toBigIntArray();
  }

  set denorms(value: Array<BigInt>) {
    this.set("denorms", Value.fromBigIntArray(value));
  }

  get desiredDenorms(): Array<BigInt> {
    let value = this.get("desiredDenorms");
    return value.toBigIntArray();
  }

  set desiredDenorms(value: Array<BigInt>) {
    this.set("desiredDenorms", Value.fromBigIntArray(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }
}

export class DailyPoolSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DailyPoolSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DailyPoolSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DailyPoolSnapshot", id.toString(), this);
  }

  static load(id: string): DailyPoolSnapshot | null {
    return store.get("DailyPoolSnapshot", id) as DailyPoolSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get feesTotalUSD(): BigDecimal {
    let value = this.get("feesTotalUSD");
    return value.toBigDecimal();
  }

  set feesTotalUSD(value: BigDecimal) {
    this.set("feesTotalUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSwapVolumeUSD(): BigDecimal {
    let value = this.get("totalSwapVolumeUSD");
    return value.toBigDecimal();
  }

  set totalSwapVolumeUSD(value: BigDecimal) {
    this.set("totalSwapVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get balances(): Array<BigInt> {
    let value = this.get("balances");
    return value.toBigIntArray();
  }

  set balances(value: Array<BigInt>) {
    this.set("balances", Value.fromBigIntArray(value));
  }

  get denorms(): Array<BigInt> {
    let value = this.get("denorms");
    return value.toBigIntArray();
  }

  set denorms(value: Array<BigInt>) {
    this.set("denorms", Value.fromBigIntArray(value));
  }

  get desiredDenorms(): Array<BigInt> {
    let value = this.get("desiredDenorms");
    return value.toBigIntArray();
  }

  set desiredDenorms(value: Array<BigInt>) {
    this.set("desiredDenorms", Value.fromBigIntArray(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    return value.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    return value.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenAmountIn(): BigInt {
    let value = this.get("tokenAmountIn");
    return value.toBigInt();
  }

  set tokenAmountIn(value: BigInt) {
    this.set("tokenAmountIn", Value.fromBigInt(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
