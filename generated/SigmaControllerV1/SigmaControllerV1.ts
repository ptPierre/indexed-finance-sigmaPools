// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewPoolInitializer extends ethereum.Event {
  get params(): NewPoolInitializer__Params {
    return new NewPoolInitializer__Params(this);
  }
}

export class NewPoolInitializer__Params {
  _event: NewPoolInitializer;

  constructor(event: NewPoolInitializer) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initializer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get listID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get indexSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolInitialized extends ethereum.Event {
  get params(): PoolInitialized__Params {
    return new PoolInitialized__Params(this);
  }
}

export class PoolInitialized__Params {
  _event: PoolInitialized;

  constructor(event: PoolInitialized) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unboundTokenSeller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get listID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get indexSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenListAdded extends ethereum.Event {
  get params(): TokenListAdded__Params {
    return new TokenListAdded__Params(this);
  }
}

export class TokenListAdded__Params {
  _event: TokenListAdded;

  constructor(event: TokenListAdded) {
    this._event = event;
  }

  get listID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metadataHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get scoringStrategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minimumScore(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maximumScore(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenListSorted extends ethereum.Event {
  get params(): TokenListSorted__Params {
    return new TokenListSorted__Params(this);
  }
}

export class TokenListSorted__Params {
  _event: TokenListSorted;

  constructor(event: TokenListSorted) {
    this._event = event;
  }

  get listID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenRemoved extends ethereum.Event {
  get params(): TokenRemoved__Params {
    return new TokenRemoved__Params(this);
  }
}

export class TokenRemoved__Params {
  _event: TokenRemoved;

  constructor(event: TokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SigmaControllerV1__getInitialTokensAndBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SigmaControllerV1__getSortedAndFilteredTokensAndScoresResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SigmaControllerV1__getTokenListConfigResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class SigmaControllerV1__getTopTokensAndScoresResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SigmaControllerV1__indexPoolMetadataResult {
  value0: boolean;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class SigmaControllerV1__prepareIndexPoolResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class SigmaControllerV1 extends ethereum.SmartContract {
  static bind(address: Address): SigmaControllerV1 {
    return new SigmaControllerV1("SigmaControllerV1", address);
  }

  INITIALIZER_IMPLEMENTATION_ID(): Bytes {
    let result = super.call(
      "INITIALIZER_IMPLEMENTATION_ID",
      "INITIALIZER_IMPLEMENTATION_ID():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_INITIALIZER_IMPLEMENTATION_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "INITIALIZER_IMPLEMENTATION_ID",
      "INITIALIZER_IMPLEMENTATION_ID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_INDEX_SIZE(): BigInt {
    let result = super.call("MAX_INDEX_SIZE", "MAX_INDEX_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_INDEX_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_INDEX_SIZE",
      "MAX_INDEX_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LIST_TOKENS(): BigInt {
    let result = super.call(
      "MAX_LIST_TOKENS",
      "MAX_LIST_TOKENS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_LIST_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LIST_TOKENS",
      "MAX_LIST_TOKENS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_BALANCE(): BigInt {
    let result = super.call("MIN_BALANCE", "MIN_BALANCE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_BALANCE", "MIN_BALANCE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_INDEX_SIZE(): BigInt {
    let result = super.call("MIN_INDEX_SIZE", "MIN_INDEX_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_INDEX_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_INDEX_SIZE",
      "MIN_INDEX_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  POOL_IMPLEMENTATION_ID(): Bytes {
    let result = super.call(
      "POOL_IMPLEMENTATION_ID",
      "POOL_IMPLEMENTATION_ID():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_POOL_IMPLEMENTATION_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "POOL_IMPLEMENTATION_ID",
      "POOL_IMPLEMENTATION_ID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  POOL_REWEIGH_DELAY(): BigInt {
    let result = super.call(
      "POOL_REWEIGH_DELAY",
      "POOL_REWEIGH_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_POOL_REWEIGH_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "POOL_REWEIGH_DELAY",
      "POOL_REWEIGH_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWEIGHS_BEFORE_REINDEX(): i32 {
    let result = super.call(
      "REWEIGHS_BEFORE_REINDEX",
      "REWEIGHS_BEFORE_REINDEX():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_REWEIGHS_BEFORE_REINDEX(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "REWEIGHS_BEFORE_REINDEX",
      "REWEIGHS_BEFORE_REINDEX():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  SELLER_IMPLEMENTATION_ID(): Bytes {
    let result = super.call(
      "SELLER_IMPLEMENTATION_ID",
      "SELLER_IMPLEMENTATION_ID():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SELLER_IMPLEMENTATION_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SELLER_IMPLEMENTATION_ID",
      "SELLER_IMPLEMENTATION_ID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SHORT_TWAP_MAX_TIME_ELAPSED(): BigInt {
    let result = super.call(
      "SHORT_TWAP_MAX_TIME_ELAPSED",
      "SHORT_TWAP_MAX_TIME_ELAPSED():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_SHORT_TWAP_MAX_TIME_ELAPSED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHORT_TWAP_MAX_TIME_ELAPSED",
      "SHORT_TWAP_MAX_TIME_ELAPSED():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHORT_TWAP_MIN_TIME_ELAPSED(): BigInt {
    let result = super.call(
      "SHORT_TWAP_MIN_TIME_ELAPSED",
      "SHORT_TWAP_MIN_TIME_ELAPSED():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_SHORT_TWAP_MIN_TIME_ELAPSED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHORT_TWAP_MIN_TIME_ELAPSED",
      "SHORT_TWAP_MIN_TIME_ELAPSED():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  circuitBreaker(): Address {
    let result = super.call("circuitBreaker", "circuitBreaker():(address)", []);

    return result[0].toAddress();
  }

  try_circuitBreaker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "circuitBreaker",
      "circuitBreaker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  circulatingMarketCapOracle(): Address {
    let result = super.call(
      "circulatingMarketCapOracle",
      "circulatingMarketCapOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_circulatingMarketCapOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "circulatingMarketCapOracle",
      "circulatingMarketCapOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeInitializerAddress(poolAddress: Address): Address {
    let result = super.call(
      "computeInitializerAddress",
      "computeInitializerAddress(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );

    return result[0].toAddress();
  }

  try_computeInitializerAddress(
    poolAddress: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeInitializerAddress",
      "computeInitializerAddress(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computePoolAddress(listID: BigInt, indexSize: BigInt): Address {
    let result = super.call(
      "computePoolAddress",
      "computePoolAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize)
      ]
    );

    return result[0].toAddress();
  }

  try_computePoolAddress(
    listID: BigInt,
    indexSize: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computePoolAddress",
      "computePoolAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeSellerAddress(poolAddress: Address): Address {
    let result = super.call(
      "computeSellerAddress",
      "computeSellerAddress(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );

    return result[0].toAddress();
  }

  try_computeSellerAddress(poolAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeSellerAddress",
      "computeSellerAddress(address):(address)",
      [ethereum.Value.fromAddress(poolAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultExitFeeRecipient(): Address {
    let result = super.call(
      "defaultExitFeeRecipient",
      "defaultExitFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultExitFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultExitFeeRecipient",
      "defaultExitFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultSellerPremium(): i32 {
    let result = super.call(
      "defaultSellerPremium",
      "defaultSellerPremium():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_defaultSellerPremium(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "defaultSellerPremium",
      "defaultSellerPremium():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getInitialTokensAndBalances(
    listID: BigInt,
    indexSize: BigInt,
    wethValue: BigInt
  ): SigmaControllerV1__getInitialTokensAndBalancesResult {
    let result = super.call(
      "getInitialTokensAndBalances",
      "getInitialTokensAndBalances(uint256,uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(wethValue)
      ]
    );

    return new SigmaControllerV1__getInitialTokensAndBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getInitialTokensAndBalances(
    listID: BigInt,
    indexSize: BigInt,
    wethValue: BigInt
  ): ethereum.CallResult<SigmaControllerV1__getInitialTokensAndBalancesResult> {
    let result = super.tryCall(
      "getInitialTokensAndBalances",
      "getInitialTokensAndBalances(uint256,uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(wethValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__getInitialTokensAndBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getSortedAndFilteredTokensAndScores(
    listID: BigInt
  ): SigmaControllerV1__getSortedAndFilteredTokensAndScoresResult {
    let result = super.call(
      "getSortedAndFilteredTokensAndScores",
      "getSortedAndFilteredTokensAndScores(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );

    return new SigmaControllerV1__getSortedAndFilteredTokensAndScoresResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getSortedAndFilteredTokensAndScores(
    listID: BigInt
  ): ethereum.CallResult<
    SigmaControllerV1__getSortedAndFilteredTokensAndScoresResult
  > {
    let result = super.tryCall(
      "getSortedAndFilteredTokensAndScores",
      "getSortedAndFilteredTokensAndScores(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__getSortedAndFilteredTokensAndScoresResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getTokenList(listID: BigInt): Array<Address> {
    let result = super.call(
      "getTokenList",
      "getTokenList(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );

    return result[0].toAddressArray();
  }

  try_getTokenList(listID: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenList",
      "getTokenList(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokenListConfig(
    listID: BigInt
  ): SigmaControllerV1__getTokenListConfigResult {
    let result = super.call(
      "getTokenListConfig",
      "getTokenListConfig(uint256):(address,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );

    return new SigmaControllerV1__getTokenListConfigResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getTokenListConfig(
    listID: BigInt
  ): ethereum.CallResult<SigmaControllerV1__getTokenListConfigResult> {
    let result = super.tryCall(
      "getTokenListConfig",
      "getTokenListConfig(uint256):(address,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__getTokenListConfigResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTokenScores(listID: BigInt, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getTokenScores",
      "getTokenScores(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getTokenScores(
    listID: BigInt,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTokenScores",
      "getTokenScores(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTopTokensAndScores(
    listID: BigInt,
    count: BigInt
  ): SigmaControllerV1__getTopTokensAndScoresResult {
    let result = super.call(
      "getTopTokensAndScores",
      "getTopTokensAndScores(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(count)
      ]
    );

    return new SigmaControllerV1__getTopTokensAndScoresResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getTopTokensAndScores(
    listID: BigInt,
    count: BigInt
  ): ethereum.CallResult<SigmaControllerV1__getTopTokensAndScoresResult> {
    let result = super.tryCall(
      "getTopTokensAndScores",
      "getTopTokensAndScores(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(count)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__getTopTokensAndScoresResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  indexPoolMetadata(
    param0: Address
  ): SigmaControllerV1__indexPoolMetadataResult {
    let result = super.call(
      "indexPoolMetadata",
      "indexPoolMetadata(address):(bool,uint16,uint8,uint8,uint64)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SigmaControllerV1__indexPoolMetadataResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_indexPoolMetadata(
    param0: Address
  ): ethereum.CallResult<SigmaControllerV1__indexPoolMetadataResult> {
    let result = super.tryCall(
      "indexPoolMetadata",
      "indexPoolMetadata(address):(bool,uint16,uint8,uint8,uint64)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__indexPoolMetadataResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  isTokenInlist(listID: BigInt, token: Address): boolean {
    let result = super.call(
      "isTokenInlist",
      "isTokenInlist(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTokenInlist(
    listID: BigInt,
    token: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenInlist",
      "isTokenInlist(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFactory(): Address {
    let result = super.call("poolFactory", "poolFactory():(address)", []);

    return result[0].toAddress();
  }

  try_poolFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolFactory", "poolFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prepareIndexPool(
    listID: BigInt,
    indexSize: BigInt,
    initialWethValue: BigInt,
    name: string,
    symbol: string
  ): SigmaControllerV1__prepareIndexPoolResult {
    let result = super.call(
      "prepareIndexPool",
      "prepareIndexPool(uint256,uint256,uint256,string,string):(address,address)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(initialWethValue),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );

    return new SigmaControllerV1__prepareIndexPoolResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_prepareIndexPool(
    listID: BigInt,
    indexSize: BigInt,
    initialWethValue: BigInt,
    name: string,
    symbol: string
  ): ethereum.CallResult<SigmaControllerV1__prepareIndexPoolResult> {
    let result = super.tryCall(
      "prepareIndexPool",
      "prepareIndexPool(uint256,uint256,uint256,string,string):(address,address)",
      [
        ethereum.Value.fromUnsignedBigInt(listID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(initialWethValue),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaControllerV1__prepareIndexPoolResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  proxyManager(): Address {
    let result = super.call("proxyManager", "proxyManager():(address)", []);

    return result[0].toAddress();
  }

  try_proxyManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyManager", "proxyManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenListCount(): BigInt {
    let result = super.call("tokenListCount", "tokenListCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenListCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenListCount",
      "tokenListCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapOracle(): Address {
    let result = super.call("uniswapOracle", "uniswapOracle():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapOracle",
      "uniswapOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateTokenPrices(listID: BigInt): Array<boolean> {
    let result = super.call(
      "updateTokenPrices",
      "updateTokenPrices(uint256):(bool[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );

    return result[0].toBooleanArray();
  }

  try_updateTokenPrices(listID: BigInt): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "updateTokenPrices",
      "updateTokenPrices(uint256):(bool[])",
      [ethereum.Value.fromUnsignedBigInt(listID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get uniswapOracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolFactory_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proxyManager_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get defaultExitFeeRecipient_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class AddTokensCall extends ethereum.Call {
  get inputs(): AddTokensCall__Inputs {
    return new AddTokensCall__Inputs(this);
  }

  get outputs(): AddTokensCall__Outputs {
    return new AddTokensCall__Outputs(this);
  }
}

export class AddTokensCall__Inputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddTokensCall__Outputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }
}

export class CreateTokenListCall extends ethereum.Call {
  get inputs(): CreateTokenListCall__Inputs {
    return new CreateTokenListCall__Inputs(this);
  }

  get outputs(): CreateTokenListCall__Outputs {
    return new CreateTokenListCall__Outputs(this);
  }
}

export class CreateTokenListCall__Inputs {
  _call: CreateTokenListCall;

  constructor(call: CreateTokenListCall) {
    this._call = call;
  }

  get metadataHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get scoringStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minimumScore(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maximumScore(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateTokenListCall__Outputs {
  _call: CreateTokenListCall;

  constructor(call: CreateTokenListCall) {
    this._call = call;
  }
}

export class DelegateCompLikeTokenFromPoolCall extends ethereum.Call {
  get inputs(): DelegateCompLikeTokenFromPoolCall__Inputs {
    return new DelegateCompLikeTokenFromPoolCall__Inputs(this);
  }

  get outputs(): DelegateCompLikeTokenFromPoolCall__Outputs {
    return new DelegateCompLikeTokenFromPoolCall__Outputs(this);
  }
}

export class DelegateCompLikeTokenFromPoolCall__Inputs {
  _call: DelegateCompLikeTokenFromPoolCall;

  constructor(call: DelegateCompLikeTokenFromPoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get delegatee(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegateCompLikeTokenFromPoolCall__Outputs {
  _call: DelegateCompLikeTokenFromPoolCall;

  constructor(call: DelegateCompLikeTokenFromPoolCall) {
    this._call = call;
  }
}

export class FinishPreparedIndexPoolCall extends ethereum.Call {
  get inputs(): FinishPreparedIndexPoolCall__Inputs {
    return new FinishPreparedIndexPoolCall__Inputs(this);
  }

  get outputs(): FinishPreparedIndexPoolCall__Outputs {
    return new FinishPreparedIndexPoolCall__Outputs(this);
  }
}

export class FinishPreparedIndexPoolCall__Inputs {
  _call: FinishPreparedIndexPoolCall;

  constructor(call: FinishPreparedIndexPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class FinishPreparedIndexPoolCall__Outputs {
  _call: FinishPreparedIndexPoolCall;

  constructor(call: FinishPreparedIndexPoolCall) {
    this._call = call;
  }
}

export class ForceReindexPoolCall extends ethereum.Call {
  get inputs(): ForceReindexPoolCall__Inputs {
    return new ForceReindexPoolCall__Inputs(this);
  }

  get outputs(): ForceReindexPoolCall__Outputs {
    return new ForceReindexPoolCall__Outputs(this);
  }
}

export class ForceReindexPoolCall__Inputs {
  _call: ForceReindexPoolCall;

  constructor(call: ForceReindexPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ForceReindexPoolCall__Outputs {
  _call: ForceReindexPoolCall;

  constructor(call: ForceReindexPoolCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get circuitBreaker_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class PrepareIndexPoolCall extends ethereum.Call {
  get inputs(): PrepareIndexPoolCall__Inputs {
    return new PrepareIndexPoolCall__Inputs(this);
  }

  get outputs(): PrepareIndexPoolCall__Outputs {
    return new PrepareIndexPoolCall__Outputs(this);
  }
}

export class PrepareIndexPoolCall__Inputs {
  _call: PrepareIndexPoolCall;

  constructor(call: PrepareIndexPoolCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get indexSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get initialWethValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class PrepareIndexPoolCall__Outputs {
  _call: PrepareIndexPoolCall;

  constructor(call: PrepareIndexPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get initializerAddress(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class ReindexPoolCall extends ethereum.Call {
  get inputs(): ReindexPoolCall__Inputs {
    return new ReindexPoolCall__Inputs(this);
  }

  get outputs(): ReindexPoolCall__Outputs {
    return new ReindexPoolCall__Outputs(this);
  }
}

export class ReindexPoolCall__Inputs {
  _call: ReindexPoolCall;

  constructor(call: ReindexPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReindexPoolCall__Outputs {
  _call: ReindexPoolCall;

  constructor(call: ReindexPoolCall) {
    this._call = call;
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReweighPoolCall extends ethereum.Call {
  get inputs(): ReweighPoolCall__Inputs {
    return new ReweighPoolCall__Inputs(this);
  }

  get outputs(): ReweighPoolCall__Outputs {
    return new ReweighPoolCall__Outputs(this);
  }
}

export class ReweighPoolCall__Inputs {
  _call: ReweighPoolCall;

  constructor(call: ReweighPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReweighPoolCall__Outputs {
  _call: ReweighPoolCall;

  constructor(call: ReweighPoolCall) {
    this._call = call;
  }
}

export class SetCircuitBreakerCall extends ethereum.Call {
  get inputs(): SetCircuitBreakerCall__Inputs {
    return new SetCircuitBreakerCall__Inputs(this);
  }

  get outputs(): SetCircuitBreakerCall__Outputs {
    return new SetCircuitBreakerCall__Outputs(this);
  }
}

export class SetCircuitBreakerCall__Inputs {
  _call: SetCircuitBreakerCall;

  constructor(call: SetCircuitBreakerCall) {
    this._call = call;
  }

  get circuitBreaker_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCircuitBreakerCall__Outputs {
  _call: SetCircuitBreakerCall;

  constructor(call: SetCircuitBreakerCall) {
    this._call = call;
  }
}

export class SetDefaultSellerPremiumCall extends ethereum.Call {
  get inputs(): SetDefaultSellerPremiumCall__Inputs {
    return new SetDefaultSellerPremiumCall__Inputs(this);
  }

  get outputs(): SetDefaultSellerPremiumCall__Outputs {
    return new SetDefaultSellerPremiumCall__Outputs(this);
  }
}

export class SetDefaultSellerPremiumCall__Inputs {
  _call: SetDefaultSellerPremiumCall;

  constructor(call: SetDefaultSellerPremiumCall) {
    this._call = call;
  }

  get _defaultSellerPremium(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetDefaultSellerPremiumCall__Outputs {
  _call: SetDefaultSellerPremiumCall;

  constructor(call: SetDefaultSellerPremiumCall) {
    this._call = call;
  }
}

export class SetPublicSwapCall extends ethereum.Call {
  get inputs(): SetPublicSwapCall__Inputs {
    return new SetPublicSwapCall__Inputs(this);
  }

  get outputs(): SetPublicSwapCall__Outputs {
    return new SetPublicSwapCall__Outputs(this);
  }
}

export class SetPublicSwapCall__Inputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }

  get indexPool_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get publicSwap(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPublicSwapCall__Outputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get swapFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class SortAndFilterTokensCall extends ethereum.Call {
  get inputs(): SortAndFilterTokensCall__Inputs {
    return new SortAndFilterTokensCall__Inputs(this);
  }

  get outputs(): SortAndFilterTokensCall__Outputs {
    return new SortAndFilterTokensCall__Outputs(this);
  }
}

export class SortAndFilterTokensCall__Inputs {
  _call: SortAndFilterTokensCall;

  constructor(call: SortAndFilterTokensCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SortAndFilterTokensCall__Outputs {
  _call: SortAndFilterTokensCall;

  constructor(call: SortAndFilterTokensCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMinimumBalanceCall extends ethereum.Call {
  get inputs(): UpdateMinimumBalanceCall__Inputs {
    return new UpdateMinimumBalanceCall__Inputs(this);
  }

  get outputs(): UpdateMinimumBalanceCall__Outputs {
    return new UpdateMinimumBalanceCall__Outputs(this);
  }
}

export class UpdateMinimumBalanceCall__Inputs {
  _call: UpdateMinimumBalanceCall;

  constructor(call: UpdateMinimumBalanceCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateMinimumBalanceCall__Outputs {
  _call: UpdateMinimumBalanceCall;

  constructor(call: UpdateMinimumBalanceCall) {
    this._call = call;
  }
}

export class UpdateSellerPremiumCall extends ethereum.Call {
  get inputs(): UpdateSellerPremiumCall__Inputs {
    return new UpdateSellerPremiumCall__Inputs(this);
  }

  get outputs(): UpdateSellerPremiumCall__Outputs {
    return new UpdateSellerPremiumCall__Outputs(this);
  }
}

export class UpdateSellerPremiumCall__Inputs {
  _call: UpdateSellerPremiumCall;

  constructor(call: UpdateSellerPremiumCall) {
    this._call = call;
  }

  get tokenSeller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get premiumPercent(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdateSellerPremiumCall__Outputs {
  _call: UpdateSellerPremiumCall;

  constructor(call: UpdateSellerPremiumCall) {
    this._call = call;
  }
}

export class UpdateTokenPricesCall extends ethereum.Call {
  get inputs(): UpdateTokenPricesCall__Inputs {
    return new UpdateTokenPricesCall__Inputs(this);
  }

  get outputs(): UpdateTokenPricesCall__Outputs {
    return new UpdateTokenPricesCall__Outputs(this);
  }
}

export class UpdateTokenPricesCall__Inputs {
  _call: UpdateTokenPricesCall;

  constructor(call: UpdateTokenPricesCall) {
    this._call = call;
  }

  get listID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTokenPricesCall__Outputs {
  _call: UpdateTokenPricesCall;

  constructor(call: UpdateTokenPricesCall) {
    this._call = call;
  }

  get pricesUpdated(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }
}
