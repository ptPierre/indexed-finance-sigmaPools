// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get src(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dst(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_DENORM_UPDATED extends ethereum.Event {
  get params(): LOG_DENORM_UPDATED__Params {
    return new LOG_DENORM_UPDATED__Params(this);
  }
}

export class LOG_DENORM_UPDATED__Params {
  _event: LOG_DENORM_UPDATED;

  constructor(event: LOG_DENORM_UPDATED) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDenorm(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LOG_DESIRED_DENORM_SET extends ethereum.Event {
  get params(): LOG_DESIRED_DENORM_SET__Params {
    return new LOG_DESIRED_DENORM_SET__Params(this);
  }
}

export class LOG_DESIRED_DENORM_SET__Params {
  _event: LOG_DESIRED_DENORM_SET;

  constructor(event: LOG_DESIRED_DENORM_SET) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get desiredDenorm(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LOG_EXIT extends ethereum.Event {
  get params(): LOG_EXIT__Params {
    return new LOG_EXIT__Params(this);
  }
}

export class LOG_EXIT__Params {
  _event: LOG_EXIT;

  constructor(event: LOG_EXIT) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_JOIN extends ethereum.Event {
  get params(): LOG_JOIN__Params {
    return new LOG_JOIN__Params(this);
  }
}

export class LOG_JOIN__Params {
  _event: LOG_JOIN;

  constructor(event: LOG_JOIN) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_MAX_TOKENS_UPDATED extends ethereum.Event {
  get params(): LOG_MAX_TOKENS_UPDATED__Params {
    return new LOG_MAX_TOKENS_UPDATED__Params(this);
  }
}

export class LOG_MAX_TOKENS_UPDATED__Params {
  _event: LOG_MAX_TOKENS_UPDATED;

  constructor(event: LOG_MAX_TOKENS_UPDATED) {
    this._event = event;
  }

  get maxPoolTokens(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LOG_MINIMUM_BALANCE_UPDATED extends ethereum.Event {
  get params(): LOG_MINIMUM_BALANCE_UPDATED__Params {
    return new LOG_MINIMUM_BALANCE_UPDATED__Params(this);
  }
}

export class LOG_MINIMUM_BALANCE_UPDATED__Params {
  _event: LOG_MINIMUM_BALANCE_UPDATED;

  constructor(event: LOG_MINIMUM_BALANCE_UPDATED) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minimumBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LOG_PUBLIC_SWAP_TOGGLED extends ethereum.Event {
  get params(): LOG_PUBLIC_SWAP_TOGGLED__Params {
    return new LOG_PUBLIC_SWAP_TOGGLED__Params(this);
  }
}

export class LOG_PUBLIC_SWAP_TOGGLED__Params {
  _event: LOG_PUBLIC_SWAP_TOGGLED;

  constructor(event: LOG_PUBLIC_SWAP_TOGGLED) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LOG_SWAP extends ethereum.Event {
  get params(): LOG_SWAP__Params {
    return new LOG_SWAP__Params(this);
  }
}

export class LOG_SWAP__Params {
  _event: LOG_SWAP;

  constructor(event: LOG_SWAP) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LOG_SWAP_FEE_UPDATED extends ethereum.Event {
  get params(): LOG_SWAP_FEE_UPDATED__Params {
    return new LOG_SWAP_FEE_UPDATED__Params(this);
  }
}

export class LOG_SWAP_FEE_UPDATED__Params {
  _event: LOG_SWAP_FEE_UPDATED;

  constructor(event: LOG_SWAP_FEE_UPDATED) {
    this._event = event;
  }

  get swapFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LOG_TOKEN_ADDED extends ethereum.Event {
  get params(): LOG_TOKEN_ADDED__Params {
    return new LOG_TOKEN_ADDED__Params(this);
  }
}

export class LOG_TOKEN_ADDED__Params {
  _event: LOG_TOKEN_ADDED;

  constructor(event: LOG_TOKEN_ADDED) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get desiredDenorm(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minimumBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_TOKEN_READY extends ethereum.Event {
  get params(): LOG_TOKEN_READY__Params {
    return new LOG_TOKEN_READY__Params(this);
  }
}

export class LOG_TOKEN_READY__Params {
  _event: LOG_TOKEN_READY;

  constructor(event: LOG_TOKEN_READY) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LOG_TOKEN_REMOVED extends ethereum.Event {
  get params(): LOG_TOKEN_REMOVED__Params {
    return new LOG_TOKEN_REMOVED__Params(this);
  }
}

export class LOG_TOKEN_REMOVED__Params {
  _event: LOG_TOKEN_REMOVED;

  constructor(event: LOG_TOKEN_REMOVED) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get src(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dst(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SigmaIndexPoolV1__extrapolatePoolValueFromTokenResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SigmaIndexPoolV1__getTokenRecordResultRecordStruct extends ethereum.Tuple {
  get bound(): boolean {
    return this[0].toBoolean();
  }

  get ready(): boolean {
    return this[1].toBoolean();
  }

  get lastDenormUpdate(): BigInt {
    return this[2].toBigInt();
  }

  get denorm(): BigInt {
    return this[3].toBigInt();
  }

  get desiredDenorm(): BigInt {
    return this[4].toBigInt();
  }

  get index(): i32 {
    return this[5].toI32();
  }

  get balance(): BigInt {
    return this[6].toBigInt();
  }
}

export class SigmaIndexPoolV1__swapExactAmountInResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SigmaIndexPoolV1__swapExactAmountOutResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SigmaIndexPoolV1 extends ethereum.SmartContract {
  static bind(address: Address): SigmaIndexPoolV1 {
    return new SigmaIndexPoolV1("SigmaIndexPoolV1", address);
  }

  VERSION_NUMBER(): BigInt {
    let result = super.call("VERSION_NUMBER", "VERSION_NUMBER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VERSION_NUMBER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VERSION_NUMBER",
      "VERSION_NUMBER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(src: Address, dst: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );

    return result[0].toBigInt();
  }

  try_allowance(src: Address, dst: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(dst: Address, amt: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_approve(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(whom: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(whom: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exitswapExternAmountOut(
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPoolAmountIn: BigInt
  ): BigInt {
    let result = super.call(
      "exitswapExternAmountOut",
      "exitswapExternAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPoolAmountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_exitswapExternAmountOut(
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPoolAmountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitswapExternAmountOut",
      "exitswapExternAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPoolAmountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extrapolatePoolValueFromToken(): SigmaIndexPoolV1__extrapolatePoolValueFromTokenResult {
    let result = super.call(
      "extrapolatePoolValueFromToken",
      "extrapolatePoolValueFromToken():(address,uint256)",
      []
    );

    return new SigmaIndexPoolV1__extrapolatePoolValueFromTokenResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_extrapolatePoolValueFromToken(): ethereum.CallResult<
    SigmaIndexPoolV1__extrapolatePoolValueFromTokenResult
  > {
    let result = super.tryCall(
      "extrapolatePoolValueFromToken",
      "extrapolatePoolValueFromToken():(address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaIndexPoolV1__extrapolatePoolValueFromTokenResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getBalance(token: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentDesiredTokens(): Array<Address> {
    let result = super.call(
      "getCurrentDesiredTokens",
      "getCurrentDesiredTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCurrentDesiredTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCurrentDesiredTokens",
      "getCurrentDesiredTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCurrentTokens(): Array<Address> {
    let result = super.call(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCurrentTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDenormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExitFeeRecipient(): Address {
    let result = super.call(
      "getExitFeeRecipient",
      "getExitFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getExitFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getExitFeeRecipient",
      "getExitFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMinimumBalance(token: Address): BigInt {
    let result = super.call(
      "getMinimumBalance",
      "getMinimumBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getMinimumBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumBalance",
      "getMinimumBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumTokens(): BigInt {
    let result = super.call("getNumTokens", "getNumTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNumTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumTokens", "getNumTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpotPrice(tokenIn: Address, tokenOut: Address): BigInt {
    let result = super.call(
      "getSpotPrice",
      "getSpotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSpotPrice(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpotPrice",
      "getSpotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapFee(): BigInt {
    let result = super.call("getSwapFee", "getSwapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSwapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSwapFee", "getSwapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenRecord(
    token: Address
  ): SigmaIndexPoolV1__getTokenRecordResultRecordStruct {
    let result = super.call(
      "getTokenRecord",
      "getTokenRecord(address):((bool,bool,uint40,uint96,uint96,uint8,uint256))",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toTuple() as SigmaIndexPoolV1__getTokenRecordResultRecordStruct;
  }

  try_getTokenRecord(
    token: Address
  ): ethereum.CallResult<SigmaIndexPoolV1__getTokenRecordResultRecordStruct> {
    let result = super.tryCall(
      "getTokenRecord",
      "getTokenRecord(address):((bool,bool,uint40,uint96,uint96,uint8,uint256))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as SigmaIndexPoolV1__getTokenRecordResultRecordStruct
    );
  }

  getTotalDenormalizedWeight(): BigInt {
    let result = super.call(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDenormalizedWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUsedBalance(token: Address): BigInt {
    let result = super.call(
      "getUsedBalance",
      "getUsedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getUsedBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUsedBalance",
      "getUsedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBound(t: Address): boolean {
    let result = super.call("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);

    return result[0].toBoolean();
  }

  try_isBound(t: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublicSwap(): boolean {
    let result = super.call("isPublicSwap", "isPublicSwap():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPublicSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublicSwap", "isPublicSwap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  joinswapPoolAmountOut(
    tokenIn: Address,
    poolAmountOut: BigInt,
    maxAmountIn: BigInt
  ): BigInt {
    let result = super.call(
      "joinswapPoolAmountOut",
      "joinswapPoolAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_joinswapPoolAmountOut(
    tokenIn: Address,
    poolAmountOut: BigInt,
    maxAmountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinswapPoolAmountOut",
      "joinswapPoolAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  swapExactAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    tokenOut: Address,
    minAmountOut: BigInt,
    maxPrice: BigInt
  ): SigmaIndexPoolV1__swapExactAmountInResult {
    let result = super.call(
      "swapExactAmountIn",
      "swapExactAmountIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new SigmaIndexPoolV1__swapExactAmountInResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    tokenOut: Address,
    minAmountOut: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<SigmaIndexPoolV1__swapExactAmountInResult> {
    let result = super.tryCall(
      "swapExactAmountIn",
      "swapExactAmountIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaIndexPoolV1__swapExactAmountInResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapExactAmountOut(
    tokenIn: Address,
    maxAmountIn: BigInt,
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPrice: BigInt
  ): SigmaIndexPoolV1__swapExactAmountOutResult {
    let result = super.call(
      "swapExactAmountOut",
      "swapExactAmountOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new SigmaIndexPoolV1__swapExactAmountOutResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactAmountOut(
    tokenIn: Address,
    maxAmountIn: BigInt,
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<SigmaIndexPoolV1__swapExactAmountOutResult> {
    let result = super.tryCall(
      "swapExactAmountOut",
      "swapExactAmountOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SigmaIndexPoolV1__swapExactAmountOutResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amt: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConfigureCall extends ethereum.Call {
  get inputs(): ConfigureCall__Inputs {
    return new ConfigureCall__Inputs(this);
  }

  get outputs(): ConfigureCall__Outputs {
    return new ConfigureCall__Outputs(this);
  }
}

export class ConfigureCall__Inputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConfigureCall__Outputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCompLikeTokenCall extends ethereum.Call {
  get inputs(): DelegateCompLikeTokenCall__Inputs {
    return new DelegateCompLikeTokenCall__Inputs(this);
  }

  get outputs(): DelegateCompLikeTokenCall__Outputs {
    return new DelegateCompLikeTokenCall__Outputs(this);
  }
}

export class DelegateCompLikeTokenCall__Inputs {
  _call: DelegateCompLikeTokenCall;

  constructor(call: DelegateCompLikeTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DelegateCompLikeTokenCall__Outputs {
  _call: DelegateCompLikeTokenCall;

  constructor(call: DelegateCompLikeTokenCall) {
    this._call = call;
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class ExitswapExternAmountOutCall extends ethereum.Call {
  get inputs(): ExitswapExternAmountOutCall__Inputs {
    return new ExitswapExternAmountOutCall__Inputs(this);
  }

  get outputs(): ExitswapExternAmountOutCall__Outputs {
    return new ExitswapExternAmountOutCall__Outputs(this);
  }
}

export class ExitswapExternAmountOutCall__Inputs {
  _call: ExitswapExternAmountOutCall;

  constructor(call: ExitswapExternAmountOutCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxPoolAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitswapExternAmountOutCall__Outputs {
  _call: ExitswapExternAmountOutCall;

  constructor(call: ExitswapExternAmountOutCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExitswapPoolAmountInCall extends ethereum.Call {
  get inputs(): ExitswapPoolAmountInCall__Inputs {
    return new ExitswapPoolAmountInCall__Inputs(this);
  }

  get outputs(): ExitswapPoolAmountInCall__Outputs {
    return new ExitswapPoolAmountInCall__Outputs(this);
  }
}

export class ExitswapPoolAmountInCall__Inputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitswapPoolAmountInCall__Outputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GulpCall extends ethereum.Call {
  get inputs(): GulpCall__Inputs {
    return new GulpCall__Inputs(this);
  }

  get outputs(): GulpCall__Outputs {
    return new GulpCall__Outputs(this);
  }
}

export class GulpCall__Inputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GulpCall__Outputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get denorms(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get tokenProvider(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get unbindHandler(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get exitFeeRecipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class JoinswapExternAmountInCall extends ethereum.Call {
  get inputs(): JoinswapExternAmountInCall__Inputs {
    return new JoinswapExternAmountInCall__Inputs(this);
  }

  get outputs(): JoinswapExternAmountInCall__Outputs {
    return new JoinswapExternAmountInCall__Outputs(this);
  }
}

export class JoinswapExternAmountInCall__Inputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPoolAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinswapExternAmountInCall__Outputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class JoinswapPoolAmountOutCall extends ethereum.Call {
  get inputs(): JoinswapPoolAmountOutCall__Inputs {
    return new JoinswapPoolAmountOutCall__Inputs(this);
  }

  get outputs(): JoinswapPoolAmountOutCall__Outputs {
    return new JoinswapPoolAmountOutCall__Outputs(this);
  }
}

export class JoinswapPoolAmountOutCall__Inputs {
  _call: JoinswapPoolAmountOutCall;

  constructor(call: JoinswapPoolAmountOutCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinswapPoolAmountOutCall__Outputs {
  _call: JoinswapPoolAmountOutCall;

  constructor(call: JoinswapPoolAmountOutCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ReindexTokensCall extends ethereum.Call {
  get inputs(): ReindexTokensCall__Inputs {
    return new ReindexTokensCall__Inputs(this);
  }

  get outputs(): ReindexTokensCall__Outputs {
    return new ReindexTokensCall__Outputs(this);
  }
}

export class ReindexTokensCall__Inputs {
  _call: ReindexTokensCall;

  constructor(call: ReindexTokensCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get desiredDenorms(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get minimumBalances(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ReindexTokensCall__Outputs {
  _call: ReindexTokensCall;

  constructor(call: ReindexTokensCall) {
    this._call = call;
  }
}

export class ReweighTokensCall extends ethereum.Call {
  get inputs(): ReweighTokensCall__Inputs {
    return new ReweighTokensCall__Inputs(this);
  }

  get outputs(): ReweighTokensCall__Outputs {
    return new ReweighTokensCall__Outputs(this);
  }
}

export class ReweighTokensCall__Inputs {
  _call: ReweighTokensCall;

  constructor(call: ReweighTokensCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get desiredDenorms(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ReweighTokensCall__Outputs {
  _call: ReweighTokensCall;

  constructor(call: ReweighTokensCall) {
    this._call = call;
  }
}

export class SetExitFeeRecipientCall extends ethereum.Call {
  get inputs(): SetExitFeeRecipientCall__Inputs {
    return new SetExitFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetExitFeeRecipientCall__Outputs {
    return new SetExitFeeRecipientCall__Outputs(this);
  }
}

export class SetExitFeeRecipientCall__Inputs {
  _call: SetExitFeeRecipientCall;

  constructor(call: SetExitFeeRecipientCall) {
    this._call = call;
  }

  get exitFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExitFeeRecipientCall__Outputs {
  _call: SetExitFeeRecipientCall;

  constructor(call: SetExitFeeRecipientCall) {
    this._call = call;
  }
}

export class SetMinimumBalanceCall extends ethereum.Call {
  get inputs(): SetMinimumBalanceCall__Inputs {
    return new SetMinimumBalanceCall__Inputs(this);
  }

  get outputs(): SetMinimumBalanceCall__Outputs {
    return new SetMinimumBalanceCall__Outputs(this);
  }
}

export class SetMinimumBalanceCall__Inputs {
  _call: SetMinimumBalanceCall;

  constructor(call: SetMinimumBalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minimumBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinimumBalanceCall__Outputs {
  _call: SetMinimumBalanceCall;

  constructor(call: SetMinimumBalanceCall) {
    this._call = call;
  }
}

export class SetPublicSwapCall extends ethereum.Call {
  get inputs(): SetPublicSwapCall__Inputs {
    return new SetPublicSwapCall__Inputs(this);
  }

  get outputs(): SetPublicSwapCall__Outputs {
    return new SetPublicSwapCall__Outputs(this);
  }
}

export class SetPublicSwapCall__Inputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPublicSwapCall__Outputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class SwapExactAmountInCall extends ethereum.Call {
  get inputs(): SwapExactAmountInCall__Inputs {
    return new SwapExactAmountInCall__Inputs(this);
  }

  get outputs(): SwapExactAmountInCall__Outputs {
    return new SwapExactAmountInCall__Outputs(this);
  }
}

export class SwapExactAmountInCall__Inputs {
  _call: SwapExactAmountInCall;

  constructor(call: SwapExactAmountInCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenOut(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactAmountInCall__Outputs {
  _call: SwapExactAmountInCall;

  constructor(call: SwapExactAmountInCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapExactAmountOutCall extends ethereum.Call {
  get inputs(): SwapExactAmountOutCall__Inputs {
    return new SwapExactAmountOutCall__Inputs(this);
  }

  get outputs(): SwapExactAmountOutCall__Outputs {
    return new SwapExactAmountOutCall__Outputs(this);
  }
}

export class SwapExactAmountOutCall__Inputs {
  _call: SwapExactAmountOutCall;

  constructor(call: SwapExactAmountOutCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenOut(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactAmountOutCall__Outputs {
  _call: SwapExactAmountOutCall;

  constructor(call: SwapExactAmountOutCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
